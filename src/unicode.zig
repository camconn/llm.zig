// -*- coding: utf-8 -*-
// llm.zig - LLM implementation in Zig
//
// SPDX-License-Identifier: GPL-3.0-or-later
// Â© 2025 Cameron Conn

//! unicode: Unicode character helpers
//! This module contains methods for decoding and operations on Unicode as well as checking if
//! Unicode characters fall within certain classes.

const std = @import("std");

/// Calculate the length of the first unicode codepoint in the provided string.
/// Assumes the string is a valid UTF-8 string and does not end prematurely.
pub fn calcFirstCodepointUnicodeLen(str: []const u8) !usize {
    const top_bit = 0x80;
    const leading_bits = 0xC0;

    // Trivial case first for single-byte
    if (str.len < 1) {
        return error.Empty;
    }
    if (str[0] & 0x80 == 0) {
        return 1;
    }

    // Decode length of codepoint from the bitmask for leading byte.
    var size: usize = 0;
    // bits to check
    const masks = [_]u8{
        0b1110_0000,
        0b1111_0000,
        0b1111_1000,
    };
    // what we expect when performing bitwise AND against leading byte
    const good_mask = [_]u8{
        0b1100_0000,
        0b1110_0000,
        0b1111_0000,
    };
    const leading = str[0];
    for (0.., masks) |i, mask| {
        if (leading & mask == good_mask[i]) {
            size = i + 2;
        }
    }

    // Check that we found a matching bitmask
    if (size == 0) {
        // Invalid unicode
        return error.Unicode;
    }

    for (1..size) |i| {
        if (str[i] & leading_bits != top_bit) {
            std.debug.print("Invalid byte at index {d} in {d}\n", .{ i, str });
            return error.Unicode;
        }
    }

    return size;
}

test "calcFirstCodepointUnicodeLen" {
    try std.testing.expectError(error.Empty, calcFirstCodepointUnicodeLen(""));
    try std.testing.expectEqual(1, try calcFirstCodepointUnicodeLen("asdf"));
    try std.testing.expectEqual(1, try calcFirstCodepointUnicodeLen("Hello, world"));
    try std.testing.expectEqual(2, try calcFirstCodepointUnicodeLen("Ä "));
    try std.testing.expectEqual(2, try calcFirstCodepointUnicodeLen("Ä hello"));
    try std.testing.expectEqual(3, try calcFirstCodepointUnicodeLen("ä½ å¥½"));
    try std.testing.expectEqual(4, try calcFirstCodepointUnicodeLen("ðŸ‡º"));
    try std.testing.expectEqual(4, try calcFirstCodepointUnicodeLen("ðŸ‡¸"));
    try std.testing.expectEqual(4, try calcFirstCodepointUnicodeLen("ðŸ‡ºðŸ‡¸"));
}

/// Decode the first valid UTF-8 encoded code point in `str` and return it.
/// Assumes the first code point in `str` is in valid UTF-8 encoding.
pub fn decodeUtf8First(str: []const u8) !u21 {
    const len = try calcFirstCodepointUnicodeLen(str);

    return switch (len) {
        1 => str[0],
        2 => std.unicode.utf8Decode2(str[0..2].*),
        3 => std.unicode.utf8Decode3(str[0..3].*),
        4 => std.unicode.utf8Decode4(str[0..4].*),
        else => @panic("Invalid calculated length"),
    };
}

test "decodeUtf8First cases" {
    try std.testing.expectEqual(' ', try decodeUtf8First(" "));
    try std.testing.expectEqual('f', try decodeUtf8First("friend"));
    try std.testing.expectEqual('Ä ', try decodeUtf8First("Ä "));
    try std.testing.expectEqual('Ä ', try decodeUtf8First("Ä hello"));
    try std.testing.expectEqual('ä½ ', try decodeUtf8First("ä½ å¥½"));
    try std.testing.expectEqual('ðŸ‡º', try decodeUtf8First("ðŸ‡ºðŸ‡¸"));
}

// ========================================
// Generated methods
// ========================================
// Below this line is code for methods which were generated by code from reading the Unicode
// Character Database (UCD). This is necessary to get full and accurate coverage for reporting
// accurate Unicode character groups.

/// Check if `src` is a Unicode character in the Unicode `White_Space` property group.
pub fn isWhitespace(src: u21) bool {
    // Derived from list shown in UCD `PropList.txt` [1].
    // This is a listing of the `White_Space` property characters.
    // [1]: https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt
    return switch (src) {
        0x0009...0x000D => true,
        0x0020 => true,
        0x0085 => true,
        0x00A0 => true,
        0x1680 => true,
        0x2000...0x200A => true,
        0x2028...0x2029 => true,
        0x202F => true,
        0x205F => true,
        0x3000 => true,
        else => false,
    };
}

test "isWhitespace" {
    try std.testing.expectEqual(true, isWhitespace(' '));
    try std.testing.expectEqual(true, isWhitespace('\r'));
    try std.testing.expectEqual(true, isWhitespace('\n'));
    try std.testing.expectEqual(true, isWhitespace('\t'));
    try std.testing.expectEqual(true, isWhitespace('\u{000d}'));
    try std.testing.expectEqual(true, isWhitespace('\u{3000}'));
    try std.testing.expectEqual(true, isWhitespace('\u{205F}'));
    try std.testing.expectEqual(false, isWhitespace('A'));
    try std.testing.expectEqual(false, isWhitespace(0));
    try std.testing.expectEqual(false, isWhitespace('\u{000e}'));
}

/// Check if `src` is a Unicode character in the `L` (Letter) General Category [1].
/// This method's implementation was generated with `printRanges` in `unicode_data.zig`.
/// [1]: https://www.unicode.org/reports/tr44/#General_Category_Values
pub fn isLetter(src: u21) bool {
    // NB: Don't edit this manually, generate it from UCD using unicode_data.zig
    return switch (src) {
        0x0041...0x005A => true,
        0x0061...0x007A => true,
        0x00AA => true,
        0x00B5 => true,
        0x00BA => true,
        0x00C0...0x00D6 => true,
        0x00D8...0x00F6 => true,
        0x00F8...0x02C1 => true,
        0x02C6...0x02D1 => true,
        0x02E0...0x02E4 => true,
        0x02EC => true,
        0x02EE => true,
        0x0370...0x0374 => true,
        0x0376...0x0377 => true,
        0x037A...0x037D => true,
        0x037F => true,
        0x0386 => true,
        0x0388...0x038A => true,
        0x038C => true,
        0x038E...0x03A1 => true,
        0x03A3...0x03F5 => true,
        0x03F7...0x0481 => true,
        0x048A...0x052F => true,
        0x0531...0x0556 => true,
        0x0559 => true,
        0x0560...0x0588 => true,
        0x05D0...0x05EA => true,
        0x05EF...0x05F2 => true,
        0x0620...0x064A => true,
        0x066E...0x066F => true,
        0x0671...0x06D3 => true,
        0x06D5 => true,
        0x06E5...0x06E6 => true,
        0x06EE...0x06EF => true,
        0x06FA...0x06FC => true,
        0x06FF => true,
        0x0710 => true,
        0x0712...0x072F => true,
        0x074D...0x07A5 => true,
        0x07B1 => true,
        0x07CA...0x07EA => true,
        0x07F4...0x07F5 => true,
        0x07FA => true,
        0x0800...0x0815 => true,
        0x081A => true,
        0x0824 => true,
        0x0828 => true,
        0x0840...0x0858 => true,
        0x0860...0x086A => true,
        0x0870...0x0887 => true,
        0x0889...0x088E => true,
        0x08A0...0x08C9 => true,
        0x0904...0x0939 => true,
        0x093D => true,
        0x0950 => true,
        0x0958...0x0961 => true,
        0x0971...0x0980 => true,
        0x0985...0x098C => true,
        0x098F...0x0990 => true,
        0x0993...0x09A8 => true,
        0x09AA...0x09B0 => true,
        0x09B2 => true,
        0x09B6...0x09B9 => true,
        0x09BD => true,
        0x09CE => true,
        0x09DC...0x09DD => true,
        0x09DF...0x09E1 => true,
        0x09F0...0x09F1 => true,
        0x09FC => true,
        0x0A05...0x0A0A => true,
        0x0A0F...0x0A10 => true,
        0x0A13...0x0A28 => true,
        0x0A2A...0x0A30 => true,
        0x0A32...0x0A33 => true,
        0x0A35...0x0A36 => true,
        0x0A38...0x0A39 => true,
        0x0A59...0x0A5C => true,
        0x0A5E => true,
        0x0A72...0x0A74 => true,
        0x0A85...0x0A8D => true,
        0x0A8F...0x0A91 => true,
        0x0A93...0x0AA8 => true,
        0x0AAA...0x0AB0 => true,
        0x0AB2...0x0AB3 => true,
        0x0AB5...0x0AB9 => true,
        0x0ABD => true,
        0x0AD0 => true,
        0x0AE0...0x0AE1 => true,
        0x0AF9 => true,
        0x0B05...0x0B0C => true,
        0x0B0F...0x0B10 => true,
        0x0B13...0x0B28 => true,
        0x0B2A...0x0B30 => true,
        0x0B32...0x0B33 => true,
        0x0B35...0x0B39 => true,
        0x0B3D => true,
        0x0B5C...0x0B5D => true,
        0x0B5F...0x0B61 => true,
        0x0B71 => true,
        0x0B83 => true,
        0x0B85...0x0B8A => true,
        0x0B8E...0x0B90 => true,
        0x0B92...0x0B95 => true,
        0x0B99...0x0B9A => true,
        0x0B9C => true,
        0x0B9E...0x0B9F => true,
        0x0BA3...0x0BA4 => true,
        0x0BA8...0x0BAA => true,
        0x0BAE...0x0BB9 => true,
        0x0BD0 => true,
        0x0C05...0x0C0C => true,
        0x0C0E...0x0C10 => true,
        0x0C12...0x0C28 => true,
        0x0C2A...0x0C39 => true,
        0x0C3D => true,
        0x0C58...0x0C5A => true,
        0x0C5D => true,
        0x0C60...0x0C61 => true,
        0x0C80 => true,
        0x0C85...0x0C8C => true,
        0x0C8E...0x0C90 => true,
        0x0C92...0x0CA8 => true,
        0x0CAA...0x0CB3 => true,
        0x0CB5...0x0CB9 => true,
        0x0CBD => true,
        0x0CDD...0x0CDE => true,
        0x0CE0...0x0CE1 => true,
        0x0CF1...0x0CF2 => true,
        0x0D04...0x0D0C => true,
        0x0D0E...0x0D10 => true,
        0x0D12...0x0D3A => true,
        0x0D3D => true,
        0x0D4E => true,
        0x0D54...0x0D56 => true,
        0x0D5F...0x0D61 => true,
        0x0D7A...0x0D7F => true,
        0x0D85...0x0D96 => true,
        0x0D9A...0x0DB1 => true,
        0x0DB3...0x0DBB => true,
        0x0DBD => true,
        0x0DC0...0x0DC6 => true,
        0x0E01...0x0E30 => true,
        0x0E32...0x0E33 => true,
        0x0E40...0x0E46 => true,
        0x0E81...0x0E82 => true,
        0x0E84 => true,
        0x0E86...0x0E8A => true,
        0x0E8C...0x0EA3 => true,
        0x0EA5 => true,
        0x0EA7...0x0EB0 => true,
        0x0EB2...0x0EB3 => true,
        0x0EBD => true,
        0x0EC0...0x0EC4 => true,
        0x0EC6 => true,
        0x0EDC...0x0EDF => true,
        0x0F00 => true,
        0x0F40...0x0F47 => true,
        0x0F49...0x0F6C => true,
        0x0F88...0x0F8C => true,
        0x1000...0x102A => true,
        0x103F => true,
        0x1050...0x1055 => true,
        0x105A...0x105D => true,
        0x1061 => true,
        0x1065...0x1066 => true,
        0x106E...0x1070 => true,
        0x1075...0x1081 => true,
        0x108E => true,
        0x10A0...0x10C5 => true,
        0x10C7 => true,
        0x10CD => true,
        0x10D0...0x10FA => true,
        0x10FC...0x1248 => true,
        0x124A...0x124D => true,
        0x1250...0x1256 => true,
        0x1258 => true,
        0x125A...0x125D => true,
        0x1260...0x1288 => true,
        0x128A...0x128D => true,
        0x1290...0x12B0 => true,
        0x12B2...0x12B5 => true,
        0x12B8...0x12BE => true,
        0x12C0 => true,
        0x12C2...0x12C5 => true,
        0x12C8...0x12D6 => true,
        0x12D8...0x1310 => true,
        0x1312...0x1315 => true,
        0x1318...0x135A => true,
        0x1380...0x138F => true,
        0x13A0...0x13F5 => true,
        0x13F8...0x13FD => true,
        0x1401...0x166C => true,
        0x166F...0x167F => true,
        0x1681...0x169A => true,
        0x16A0...0x16EA => true,
        0x16F1...0x16F8 => true,
        0x1700...0x1711 => true,
        0x171F...0x1731 => true,
        0x1740...0x1751 => true,
        0x1760...0x176C => true,
        0x176E...0x1770 => true,
        0x1780...0x17B3 => true,
        0x17D7 => true,
        0x17DC => true,
        0x1820...0x1878 => true,
        0x1880...0x1884 => true,
        0x1887...0x18A8 => true,
        0x18AA => true,
        0x18B0...0x18F5 => true,
        0x1900...0x191E => true,
        0x1950...0x196D => true,
        0x1970...0x1974 => true,
        0x1980...0x19AB => true,
        0x19B0...0x19C9 => true,
        0x1A00...0x1A16 => true,
        0x1A20...0x1A54 => true,
        0x1AA7 => true,
        0x1B05...0x1B33 => true,
        0x1B45...0x1B4C => true,
        0x1B83...0x1BA0 => true,
        0x1BAE...0x1BAF => true,
        0x1BBA...0x1BE5 => true,
        0x1C00...0x1C23 => true,
        0x1C4D...0x1C4F => true,
        0x1C5A...0x1C7D => true,
        0x1C80...0x1C8A => true,
        0x1C90...0x1CBA => true,
        0x1CBD...0x1CBF => true,
        0x1CE9...0x1CEC => true,
        0x1CEE...0x1CF3 => true,
        0x1CF5...0x1CF6 => true,
        0x1CFA => true,
        0x1D00...0x1DBF => true,
        0x1E00...0x1F15 => true,
        0x1F18...0x1F1D => true,
        0x1F20...0x1F45 => true,
        0x1F48...0x1F4D => true,
        0x1F50...0x1F57 => true,
        0x1F59 => true,
        0x1F5B => true,
        0x1F5D => true,
        0x1F5F...0x1F7D => true,
        0x1F80...0x1FB4 => true,
        0x1FB6...0x1FBC => true,
        0x1FBE => true,
        0x1FC2...0x1FC4 => true,
        0x1FC6...0x1FCC => true,
        0x1FD0...0x1FD3 => true,
        0x1FD6...0x1FDB => true,
        0x1FE0...0x1FEC => true,
        0x1FF2...0x1FF4 => true,
        0x1FF6...0x1FFC => true,
        0x2071 => true,
        0x207F => true,
        0x2090...0x209C => true,
        0x2102 => true,
        0x2107 => true,
        0x210A...0x2113 => true,
        0x2115 => true,
        0x2119...0x211D => true,
        0x2124 => true,
        0x2126 => true,
        0x2128 => true,
        0x212A...0x212D => true,
        0x212F...0x2139 => true,
        0x213C...0x213F => true,
        0x2145...0x2149 => true,
        0x214E => true,
        0x2183...0x2184 => true,
        0x2C00...0x2CE4 => true,
        0x2CEB...0x2CEE => true,
        0x2CF2...0x2CF3 => true,
        0x2D00...0x2D25 => true,
        0x2D27 => true,
        0x2D2D => true,
        0x2D30...0x2D67 => true,
        0x2D6F => true,
        0x2D80...0x2D96 => true,
        0x2DA0...0x2DA6 => true,
        0x2DA8...0x2DAE => true,
        0x2DB0...0x2DB6 => true,
        0x2DB8...0x2DBE => true,
        0x2DC0...0x2DC6 => true,
        0x2DC8...0x2DCE => true,
        0x2DD0...0x2DD6 => true,
        0x2DD8...0x2DDE => true,
        0x2E2F => true,
        0x3005...0x3006 => true,
        0x3031...0x3035 => true,
        0x303B...0x303C => true,
        0x3041...0x3096 => true,
        0x309D...0x309F => true,
        0x30A1...0x30FA => true,
        0x30FC...0x30FF => true,
        0x3105...0x312F => true,
        0x3131...0x318E => true,
        0x31A0...0x31BF => true,
        0x31F0...0x31FF => true,
        0x3400 => true,
        0x4DBF => true,
        0x4E00 => true,
        0x9FFF...0xA48C => true,
        0xA4D0...0xA4FD => true,
        0xA500...0xA60C => true,
        0xA610...0xA61F => true,
        0xA62A...0xA62B => true,
        0xA640...0xA66E => true,
        0xA67F...0xA69D => true,
        0xA6A0...0xA6E5 => true,
        0xA717...0xA71F => true,
        0xA722...0xA788 => true,
        0xA78B...0xA7CD => true,
        0xA7D0...0xA7D1 => true,
        0xA7D3 => true,
        0xA7D5...0xA7DC => true,
        0xA7F2...0xA801 => true,
        0xA803...0xA805 => true,
        0xA807...0xA80A => true,
        0xA80C...0xA822 => true,
        0xA840...0xA873 => true,
        0xA882...0xA8B3 => true,
        0xA8F2...0xA8F7 => true,
        0xA8FB => true,
        0xA8FD...0xA8FE => true,
        0xA90A...0xA925 => true,
        0xA930...0xA946 => true,
        0xA960...0xA97C => true,
        0xA984...0xA9B2 => true,
        0xA9CF => true,
        0xA9E0...0xA9E4 => true,
        0xA9E6...0xA9EF => true,
        0xA9FA...0xA9FE => true,
        0xAA00...0xAA28 => true,
        0xAA40...0xAA42 => true,
        0xAA44...0xAA4B => true,
        0xAA60...0xAA76 => true,
        0xAA7A => true,
        0xAA7E...0xAAAF => true,
        0xAAB1 => true,
        0xAAB5...0xAAB6 => true,
        0xAAB9...0xAABD => true,
        0xAAC0 => true,
        0xAAC2 => true,
        0xAADB...0xAADD => true,
        0xAAE0...0xAAEA => true,
        0xAAF2...0xAAF4 => true,
        0xAB01...0xAB06 => true,
        0xAB09...0xAB0E => true,
        0xAB11...0xAB16 => true,
        0xAB20...0xAB26 => true,
        0xAB28...0xAB2E => true,
        0xAB30...0xAB5A => true,
        0xAB5C...0xAB69 => true,
        0xAB70...0xABE2 => true,
        0xAC00 => true,
        0xD7A3 => true,
        0xD7B0...0xD7C6 => true,
        0xD7CB...0xD7FB => true,
        0xF900...0xFA6D => true,
        0xFA70...0xFAD9 => true,
        0xFB00...0xFB06 => true,
        0xFB13...0xFB17 => true,
        0xFB1D => true,
        0xFB1F...0xFB28 => true,
        0xFB2A...0xFB36 => true,
        0xFB38...0xFB3C => true,
        0xFB3E => true,
        0xFB40...0xFB41 => true,
        0xFB43...0xFB44 => true,
        0xFB46...0xFBB1 => true,
        0xFBD3...0xFD3D => true,
        0xFD50...0xFD8F => true,
        0xFD92...0xFDC7 => true,
        0xFDF0...0xFDFB => true,
        0xFE70...0xFE74 => true,
        0xFE76...0xFEFC => true,
        0xFF21...0xFF3A => true,
        0xFF41...0xFF5A => true,
        0xFF66...0xFFBE => true,
        0xFFC2...0xFFC7 => true,
        0xFFCA...0xFFCF => true,
        0xFFD2...0xFFD7 => true,
        0xFFDA...0xFFDC => true,
        0x10000...0x1000B => true,
        0x1000D...0x10026 => true,
        0x10028...0x1003A => true,
        0x1003C...0x1003D => true,
        0x1003F...0x1004D => true,
        0x10050...0x1005D => true,
        0x10080...0x100FA => true,
        0x10280...0x1029C => true,
        0x102A0...0x102D0 => true,
        0x10300...0x1031F => true,
        0x1032D...0x10340 => true,
        0x10342...0x10349 => true,
        0x10350...0x10375 => true,
        0x10380...0x1039D => true,
        0x103A0...0x103C3 => true,
        0x103C8...0x103CF => true,
        0x10400...0x1049D => true,
        0x104B0...0x104D3 => true,
        0x104D8...0x104FB => true,
        0x10500...0x10527 => true,
        0x10530...0x10563 => true,
        0x10570...0x1057A => true,
        0x1057C...0x1058A => true,
        0x1058C...0x10592 => true,
        0x10594...0x10595 => true,
        0x10597...0x105A1 => true,
        0x105A3...0x105B1 => true,
        0x105B3...0x105B9 => true,
        0x105BB...0x105BC => true,
        0x105C0...0x105F3 => true,
        0x10600...0x10736 => true,
        0x10740...0x10755 => true,
        0x10760...0x10767 => true,
        0x10780...0x10785 => true,
        0x10787...0x107B0 => true,
        0x107B2...0x107BA => true,
        0x10800...0x10805 => true,
        0x10808 => true,
        0x1080A...0x10835 => true,
        0x10837...0x10838 => true,
        0x1083C => true,
        0x1083F...0x10855 => true,
        0x10860...0x10876 => true,
        0x10880...0x1089E => true,
        0x108E0...0x108F2 => true,
        0x108F4...0x108F5 => true,
        0x10900...0x10915 => true,
        0x10920...0x10939 => true,
        0x10980...0x109B7 => true,
        0x109BE...0x109BF => true,
        0x10A00 => true,
        0x10A10...0x10A13 => true,
        0x10A15...0x10A17 => true,
        0x10A19...0x10A35 => true,
        0x10A60...0x10A7C => true,
        0x10A80...0x10A9C => true,
        0x10AC0...0x10AC7 => true,
        0x10AC9...0x10AE4 => true,
        0x10B00...0x10B35 => true,
        0x10B40...0x10B55 => true,
        0x10B60...0x10B72 => true,
        0x10B80...0x10B91 => true,
        0x10C00...0x10C48 => true,
        0x10C80...0x10CB2 => true,
        0x10CC0...0x10CF2 => true,
        0x10D00...0x10D23 => true,
        0x10D4A...0x10D65 => true,
        0x10D6F...0x10D85 => true,
        0x10E80...0x10EA9 => true,
        0x10EB0...0x10EB1 => true,
        0x10EC2...0x10EC4 => true,
        0x10F00...0x10F1C => true,
        0x10F27 => true,
        0x10F30...0x10F45 => true,
        0x10F70...0x10F81 => true,
        0x10FB0...0x10FC4 => true,
        0x10FE0...0x10FF6 => true,
        0x11003...0x11037 => true,
        0x11071...0x11072 => true,
        0x11075 => true,
        0x11083...0x110AF => true,
        0x110D0...0x110E8 => true,
        0x11103...0x11126 => true,
        0x11144 => true,
        0x11147 => true,
        0x11150...0x11172 => true,
        0x11176 => true,
        0x11183...0x111B2 => true,
        0x111C1...0x111C4 => true,
        0x111DA => true,
        0x111DC => true,
        0x11200...0x11211 => true,
        0x11213...0x1122B => true,
        0x1123F...0x11240 => true,
        0x11280...0x11286 => true,
        0x11288 => true,
        0x1128A...0x1128D => true,
        0x1128F...0x1129D => true,
        0x1129F...0x112A8 => true,
        0x112B0...0x112DE => true,
        0x11305...0x1130C => true,
        0x1130F...0x11310 => true,
        0x11313...0x11328 => true,
        0x1132A...0x11330 => true,
        0x11332...0x11333 => true,
        0x11335...0x11339 => true,
        0x1133D => true,
        0x11350 => true,
        0x1135D...0x11361 => true,
        0x11380...0x11389 => true,
        0x1138B => true,
        0x1138E => true,
        0x11390...0x113B5 => true,
        0x113B7 => true,
        0x113D1 => true,
        0x113D3 => true,
        0x11400...0x11434 => true,
        0x11447...0x1144A => true,
        0x1145F...0x11461 => true,
        0x11480...0x114AF => true,
        0x114C4...0x114C5 => true,
        0x114C7 => true,
        0x11580...0x115AE => true,
        0x115D8...0x115DB => true,
        0x11600...0x1162F => true,
        0x11644 => true,
        0x11680...0x116AA => true,
        0x116B8 => true,
        0x11700...0x1171A => true,
        0x11740...0x11746 => true,
        0x11800...0x1182B => true,
        0x118A0...0x118DF => true,
        0x118FF...0x11906 => true,
        0x11909 => true,
        0x1190C...0x11913 => true,
        0x11915...0x11916 => true,
        0x11918...0x1192F => true,
        0x1193F => true,
        0x11941 => true,
        0x119A0...0x119A7 => true,
        0x119AA...0x119D0 => true,
        0x119E1 => true,
        0x119E3 => true,
        0x11A00 => true,
        0x11A0B...0x11A32 => true,
        0x11A3A => true,
        0x11A50 => true,
        0x11A5C...0x11A89 => true,
        0x11A9D => true,
        0x11AB0...0x11AF8 => true,
        0x11BC0...0x11BE0 => true,
        0x11C00...0x11C08 => true,
        0x11C0A...0x11C2E => true,
        0x11C40 => true,
        0x11C72...0x11C8F => true,
        0x11D00...0x11D06 => true,
        0x11D08...0x11D09 => true,
        0x11D0B...0x11D30 => true,
        0x11D46 => true,
        0x11D60...0x11D65 => true,
        0x11D67...0x11D68 => true,
        0x11D6A...0x11D89 => true,
        0x11D98 => true,
        0x11EE0...0x11EF2 => true,
        0x11F02 => true,
        0x11F04...0x11F10 => true,
        0x11F12...0x11F33 => true,
        0x11FB0 => true,
        0x12000...0x12399 => true,
        0x12480...0x12543 => true,
        0x12F90...0x12FF0 => true,
        0x13000...0x1342F => true,
        0x13441...0x13446 => true,
        0x13460...0x143FA => true,
        0x14400...0x14646 => true,
        0x16100...0x1611D => true,
        0x16800...0x16A38 => true,
        0x16A40...0x16A5E => true,
        0x16A70...0x16ABE => true,
        0x16AD0...0x16AED => true,
        0x16B00...0x16B2F => true,
        0x16B40...0x16B43 => true,
        0x16B63...0x16B77 => true,
        0x16B7D...0x16B8F => true,
        0x16D40...0x16D6C => true,
        0x16E40...0x16E7F => true,
        0x16F00...0x16F4A => true,
        0x16F50 => true,
        0x16F93...0x16F9F => true,
        0x16FE0...0x16FE1 => true,
        0x16FE3 => true,
        0x17000 => true,
        0x187F7 => true,
        0x18800...0x18CD5 => true,
        0x18CFF...0x18D00 => true,
        0x18D08 => true,
        0x1AFF0...0x1AFF3 => true,
        0x1AFF5...0x1AFFB => true,
        0x1AFFD...0x1AFFE => true,
        0x1B000...0x1B122 => true,
        0x1B132 => true,
        0x1B150...0x1B152 => true,
        0x1B155 => true,
        0x1B164...0x1B167 => true,
        0x1B170...0x1B2FB => true,
        0x1BC00...0x1BC6A => true,
        0x1BC70...0x1BC7C => true,
        0x1BC80...0x1BC88 => true,
        0x1BC90...0x1BC99 => true,
        0x1D400...0x1D454 => true,
        0x1D456...0x1D49C => true,
        0x1D49E...0x1D49F => true,
        0x1D4A2 => true,
        0x1D4A5...0x1D4A6 => true,
        0x1D4A9...0x1D4AC => true,
        0x1D4AE...0x1D4B9 => true,
        0x1D4BB => true,
        0x1D4BD...0x1D4C3 => true,
        0x1D4C5...0x1D505 => true,
        0x1D507...0x1D50A => true,
        0x1D50D...0x1D514 => true,
        0x1D516...0x1D51C => true,
        0x1D51E...0x1D539 => true,
        0x1D53B...0x1D53E => true,
        0x1D540...0x1D544 => true,
        0x1D546 => true,
        0x1D54A...0x1D550 => true,
        0x1D552...0x1D6A5 => true,
        0x1D6A8...0x1D6C0 => true,
        0x1D6C2...0x1D6DA => true,
        0x1D6DC...0x1D6FA => true,
        0x1D6FC...0x1D714 => true,
        0x1D716...0x1D734 => true,
        0x1D736...0x1D74E => true,
        0x1D750...0x1D76E => true,
        0x1D770...0x1D788 => true,
        0x1D78A...0x1D7A8 => true,
        0x1D7AA...0x1D7C2 => true,
        0x1D7C4...0x1D7CB => true,
        0x1DF00...0x1DF1E => true,
        0x1DF25...0x1DF2A => true,
        0x1E030...0x1E06D => true,
        0x1E100...0x1E12C => true,
        0x1E137...0x1E13D => true,
        0x1E14E => true,
        0x1E290...0x1E2AD => true,
        0x1E2C0...0x1E2EB => true,
        0x1E4D0...0x1E4EB => true,
        0x1E5D0...0x1E5ED => true,
        0x1E5F0 => true,
        0x1E7E0...0x1E7E6 => true,
        0x1E7E8...0x1E7EB => true,
        0x1E7ED...0x1E7EE => true,
        0x1E7F0...0x1E7FE => true,
        0x1E800...0x1E8C4 => true,
        0x1E900...0x1E943 => true,
        0x1E94B => true,
        0x1EE00...0x1EE03 => true,
        0x1EE05...0x1EE1F => true,
        0x1EE21...0x1EE22 => true,
        0x1EE24 => true,
        0x1EE27 => true,
        0x1EE29...0x1EE32 => true,
        0x1EE34...0x1EE37 => true,
        0x1EE39 => true,
        0x1EE3B => true,
        0x1EE42 => true,
        0x1EE47 => true,
        0x1EE49 => true,
        0x1EE4B => true,
        0x1EE4D...0x1EE4F => true,
        0x1EE51...0x1EE52 => true,
        0x1EE54 => true,
        0x1EE57 => true,
        0x1EE59 => true,
        0x1EE5B => true,
        0x1EE5D => true,
        0x1EE5F => true,
        0x1EE61...0x1EE62 => true,
        0x1EE64 => true,
        0x1EE67...0x1EE6A => true,
        0x1EE6C...0x1EE72 => true,
        0x1EE74...0x1EE77 => true,
        0x1EE79...0x1EE7C => true,
        0x1EE7E => true,
        0x1EE80...0x1EE89 => true,
        0x1EE8B...0x1EE9B => true,
        0x1EEA1...0x1EEA3 => true,
        0x1EEA5...0x1EEA9 => true,
        0x1EEAB...0x1EEBB => true,
        0x20000 => true,
        0x2A6DF => true,
        0x2A700 => true,
        0x2B739 => true,
        0x2B740 => true,
        0x2B81D => true,
        0x2B820 => true,
        0x2CEA1 => true,
        0x2CEB0 => true,
        0x2EBE0 => true,
        0x2EBF0 => true,
        0x2EE5D => true,
        0x2F800...0x2FA1D => true,
        0x30000 => true,
        0x3134A => true,
        0x31350 => true,
        0x323AF => true,
        else => false,
    };
}

test "isLetter explicit checks" {
    try std.testing.expectEqual(true, isLetter('a'));
    try std.testing.expectEqual(true, isLetter('z'));
    try std.testing.expectEqual(true, isLetter('A'));
    try std.testing.expectEqual(true, isLetter('Z'));
    try std.testing.expectEqual(true, isLetter('o'));
    try std.testing.expectEqual(true, isLetter('h'));
    try std.testing.expectEqual(true, isLetter('a'));
    try std.testing.expectEqual(true, isLetter('i'));

    try std.testing.expectEqual(false, isLetter('0'));
    try std.testing.expectEqual(false, isLetter('\n'));
    try std.testing.expectEqual(false, isLetter(0));
    try std.testing.expectEqual(false, isLetter('ðŸ‡¨'));
}

test "isLetter on UCD" {
    const ucd = @import("unicode_data.zig");
    // Go through entire Unicode Character Database and ensure Letter entries match
    const unicode_file = @embedFile("assets/unicode-16.0.0.txt");
    const entries = try ucd.readUnicodeEntries(unicode_file, std.testing.allocator);
    defer entries.deinit();

    for (entries.items) |entry| {
        const expected = ucd.UnicodeCheck.isL(entry.category);
        try std.testing.expectEqual(expected, isLetter(entry.codepoint));
    }
}

/// Check if `src` is a Unicode character in the `N` (Number) General Category [1].
/// This method's implementation was generated with `printRanges` in `unicode_data.zig`.
/// [1]: https://www.unicode.org/reports/tr44/#General_Category_Values
pub fn isNumber(src: u21) bool {
    // NB: Don't edit this manually, generate it from UCD using unicode_data.zig
    return switch (src) {
        0x0030...0x0039 => true,
        0x00B2...0x00B3 => true,
        0x00B9 => true,
        0x00BC...0x00BE => true,
        0x0660...0x0669 => true,
        0x06F0...0x06F9 => true,
        0x07C0...0x07C9 => true,
        0x0966...0x096F => true,
        0x09E6...0x09EF => true,
        0x09F4...0x09F9 => true,
        0x0A66...0x0A6F => true,
        0x0AE6...0x0AEF => true,
        0x0B66...0x0B6F => true,
        0x0B72...0x0B77 => true,
        0x0BE6...0x0BF2 => true,
        0x0C66...0x0C6F => true,
        0x0C78...0x0C7E => true,
        0x0CE6...0x0CEF => true,
        0x0D58...0x0D5E => true,
        0x0D66...0x0D78 => true,
        0x0DE6...0x0DEF => true,
        0x0E50...0x0E59 => true,
        0x0ED0...0x0ED9 => true,
        0x0F20...0x0F33 => true,
        0x1040...0x1049 => true,
        0x1090...0x1099 => true,
        0x1369...0x137C => true,
        0x16EE...0x16F0 => true,
        0x17E0...0x17E9 => true,
        0x17F0...0x17F9 => true,
        0x1810...0x1819 => true,
        0x1946...0x194F => true,
        0x19D0...0x19DA => true,
        0x1A80...0x1A89 => true,
        0x1A90...0x1A99 => true,
        0x1B50...0x1B59 => true,
        0x1BB0...0x1BB9 => true,
        0x1C40...0x1C49 => true,
        0x1C50...0x1C59 => true,
        0x2070 => true,
        0x2074...0x2079 => true,
        0x2080...0x2089 => true,
        0x2150...0x2182 => true,
        0x2185...0x2189 => true,
        0x2460...0x249B => true,
        0x24EA...0x24FF => true,
        0x2776...0x2793 => true,
        0x2CFD => true,
        0x3007 => true,
        0x3021...0x3029 => true,
        0x3038...0x303A => true,
        0x3192...0x3195 => true,
        0x3220...0x3229 => true,
        0x3248...0x324F => true,
        0x3251...0x325F => true,
        0x3280...0x3289 => true,
        0x32B1...0x32BF => true,
        0xA620...0xA629 => true,
        0xA6E6...0xA6EF => true,
        0xA830...0xA835 => true,
        0xA8D0...0xA8D9 => true,
        0xA900...0xA909 => true,
        0xA9D0...0xA9D9 => true,
        0xA9F0...0xA9F9 => true,
        0xAA50...0xAA59 => true,
        0xABF0...0xABF9 => true,
        0xFF10...0xFF19 => true,
        0x10107...0x10133 => true,
        0x10140...0x10178 => true,
        0x1018A...0x1018B => true,
        0x102E1...0x102FB => true,
        0x10320...0x10323 => true,
        0x10341 => true,
        0x1034A => true,
        0x103D1...0x103D5 => true,
        0x104A0...0x104A9 => true,
        0x10858...0x1085F => true,
        0x10879...0x1087F => true,
        0x108A7...0x108AF => true,
        0x108FB...0x108FF => true,
        0x10916...0x1091B => true,
        0x109BC...0x109BD => true,
        0x109C0...0x109CF => true,
        0x109D2...0x109FF => true,
        0x10A40...0x10A48 => true,
        0x10A7D...0x10A7E => true,
        0x10A9D...0x10A9F => true,
        0x10AEB...0x10AEF => true,
        0x10B58...0x10B5F => true,
        0x10B78...0x10B7F => true,
        0x10BA9...0x10BAF => true,
        0x10CFA...0x10CFF => true,
        0x10D30...0x10D39 => true,
        0x10D40...0x10D49 => true,
        0x10E60...0x10E7E => true,
        0x10F1D...0x10F26 => true,
        0x10F51...0x10F54 => true,
        0x10FC5...0x10FCB => true,
        0x11052...0x1106F => true,
        0x110F0...0x110F9 => true,
        0x11136...0x1113F => true,
        0x111D0...0x111D9 => true,
        0x111E1...0x111F4 => true,
        0x112F0...0x112F9 => true,
        0x11450...0x11459 => true,
        0x114D0...0x114D9 => true,
        0x11650...0x11659 => true,
        0x116C0...0x116C9 => true,
        0x116D0...0x116E3 => true,
        0x11730...0x1173B => true,
        0x118E0...0x118F2 => true,
        0x11950...0x11959 => true,
        0x11BF0...0x11BF9 => true,
        0x11C50...0x11C6C => true,
        0x11D50...0x11D59 => true,
        0x11DA0...0x11DA9 => true,
        0x11F50...0x11F59 => true,
        0x11FC0...0x11FD4 => true,
        0x12400...0x1246E => true,
        0x16130...0x16139 => true,
        0x16A60...0x16A69 => true,
        0x16AC0...0x16AC9 => true,
        0x16B50...0x16B59 => true,
        0x16B5B...0x16B61 => true,
        0x16D70...0x16D79 => true,
        0x16E80...0x16E96 => true,
        0x1CCF0...0x1CCF9 => true,
        0x1D2C0...0x1D2D3 => true,
        0x1D2E0...0x1D2F3 => true,
        0x1D360...0x1D378 => true,
        0x1D7CE...0x1D7FF => true,
        0x1E140...0x1E149 => true,
        0x1E2F0...0x1E2F9 => true,
        0x1E4F0...0x1E4F9 => true,
        0x1E5F1...0x1E5FA => true,
        0x1E8C7...0x1E8CF => true,
        0x1E950...0x1E959 => true,
        0x1EC71...0x1ECAB => true,
        0x1ECAD...0x1ECAF => true,
        0x1ECB1...0x1ECB4 => true,
        0x1ED01...0x1ED2D => true,
        0x1ED2F...0x1ED3D => true,
        0x1F100...0x1F10C => true,
        0x1FBF0...0x1FBF9 => true,
        else => false,
    };
}

test "isNumber explicit checks" {
    try std.testing.expectEqual(true, isNumber('0'));
    try std.testing.expectEqual(true, isNumber('1'));
    try std.testing.expectEqual(true, isNumber('2'));
    try std.testing.expectEqual(true, isNumber('3'));
    try std.testing.expectEqual(true, isNumber('4'));
    try std.testing.expectEqual(true, isNumber('5'));
    try std.testing.expectEqual(true, isNumber('6'));
    try std.testing.expectEqual(true, isNumber('7'));
    try std.testing.expectEqual(true, isNumber('8'));
    try std.testing.expectEqual(true, isNumber('9'));
    try std.testing.expectEqual(true, isNumber('Â¹'));
    try std.testing.expectEqual(true, isNumber('Â²'));
    try std.testing.expectEqual(true, isNumber('Â³'));
    try std.testing.expectEqual(false, isNumber('Â©'));
    try std.testing.expectEqual(true, isNumber('Â½'));
    try std.testing.expectEqual(true, isNumber('Â¾'));

    try std.testing.expectEqual(false, isLetter('ðŸ‡¨'));
}

test "isNumber on UCD" {
    const ucd = @import("unicode_data.zig");
    // Go through entire Unicode Character Database and ensure number categories match
    const ucd_file = @embedFile("assets/unicode-16.0.0.txt");
    const entries = try ucd.readUnicodeEntries(ucd_file, std.testing.allocator);
    defer entries.deinit();

    for (entries.items) |entry| {
        const expected = ucd.UnicodeCheck.isN(entry.category);
        try std.testing.expectEqual(expected, isNumber(entry.codepoint));
    }
}
